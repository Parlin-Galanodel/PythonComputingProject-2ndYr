genpolar:
	rtpairs(R,T)
	rtuniform(n, rmax, m)

raytracer:
		normalise(v)
	class Ray(p,k)
		p()
		k()
		append(p,k)
		vertices()
		points()
		__repr__()

	class SphericalRefraction(z0,curvature,n1,n2,radius)
		
		__repr__()
		intercept(ray)
		refraction(k,N,n1,n2)
		propagate_ray(ray)

	  class OutputPlane(z0)
		all in SphericalRefraction

functions:
	genpolar as 		gp
	raytracer as		rt
	matplotlib.pyplot as	plt

	FocalPoint(spherical_refraction, [ray])
	bundlesOfRays(radius, [x_shift, y_shift, ray_direction, n, m])
	plot_the_source_plane(raybundle)
	plot_ray_trace(raybundle, SphericalRefraction,[type])
	plot_output_spot(raybundle,[marks])